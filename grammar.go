package stock_parser

// Code generated by peg -inline -switch -output grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleItem
	ruleLine
	ruleOTHER
	ruleStock
	ruleXLStock
	ruleFTStock
	ruleStockName
	ruleCode
	ruleUSCode
	ruleHKCode
	ruleACode
	ruleLetter
	ruleNumber
	ruleSuffix
	ruleMarket
	ruleCNMarket
	ruleHKMarket
	ruleUSMarket
	ruleSGMarket
	ruleSP
)

var rul3s = [...]string{
	"Unknown",
	"Item",
	"Line",
	"OTHER",
	"Stock",
	"XLStock",
	"FTStock",
	"StockName",
	"Code",
	"USCode",
	"HKCode",
	"ACode",
	"Letter",
	"Number",
	"Suffix",
	"Market",
	"CNMarket",
	"HKMarket",
	"USMarket",
	"SGMarket",
	"SP",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type StockCodeParser struct {
	pos     int
	peekPos int

	Buffer string
	buffer []rune
	rules  [21]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *StockCodeParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *StockCodeParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *StockCodeParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *StockCodeParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *StockCodeParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *StockCodeParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*StockCodeParser) error {
	return func(p *StockCodeParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*StockCodeParser) error {
	return func(p *StockCodeParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *StockCodeParser) Init(options ...func(*StockCodeParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Item <- <(Line* !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position4 := position
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									if buffer[position] != rune('$') {
										goto l9
									}
									position++
									if !_rules[ruleCode]() {
										goto l9
									}
									{
										position10, tokenIndex10 := position, tokenIndex
										if !_rules[ruleSuffix]() {
											goto l11
										}
										goto l10
									l11:
										position, tokenIndex = position10, tokenIndex10
										{
											position12, tokenIndex12 := position, tokenIndex
											if !_rules[ruleSuffix]() {
												goto l12
											}
											goto l13
										l12:
											position, tokenIndex = position12, tokenIndex12
										}
									l13:
									}
								l10:
									if buffer[position] != rune('$') {
										goto l9
									}
									position++
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										position15, tokenIndex15 := position, tokenIndex
										if buffer[position] != rune('$') {
											goto l15
										}
										position++
										goto l16
									l15:
										position, tokenIndex = position15, tokenIndex15
									}
								l16:
									if !_rules[ruleCode]() {
										goto l14
									}
									if !_rules[ruleSuffix]() {
										goto l14
									}
									goto l8
								l14:
									position, tokenIndex = position8, tokenIndex8
									if buffer[position] != rune('$') {
										goto l17
									}
									position++
									if !_rules[ruleUSCode]() {
										goto l17
									}
									goto l8
								l17:
									position, tokenIndex = position8, tokenIndex8
									if buffer[position] != rune('(') {
										goto l18
									}
									position++
									{
										position19, tokenIndex19 := position, tokenIndex
										if buffer[position] != rune('N') {
											goto l20
										}
										position++
										if buffer[position] != rune('Y') {
											goto l20
										}
										position++
										if buffer[position] != rune('S') {
											goto l20
										}
										position++
										if buffer[position] != rune('E') {
											goto l20
										}
										position++
										goto l19
									l20:
										position, tokenIndex = position19, tokenIndex19
										if buffer[position] != rune('N') {
											goto l18
										}
										position++
										if buffer[position] != rune('A') {
											goto l18
										}
										position++
										if buffer[position] != rune('S') {
											goto l18
										}
										position++
										if buffer[position] != rune('D') {
											goto l18
										}
										position++
										if buffer[position] != rune('A') {
											goto l18
										}
										position++
										if buffer[position] != rune('Q') {
											goto l18
										}
										position++
									}
								l19:
									{
										position21, tokenIndex21 := position, tokenIndex
										if buffer[position] != rune('：') {
											goto l22
										}
										position++
										goto l21
									l22:
										position, tokenIndex = position21, tokenIndex21
										if buffer[position] != rune(':') {
											goto l18
										}
										position++
									}
								l21:
								l23:
									{
										position24, tokenIndex24 := position, tokenIndex
										{
											position25 := position
											{
												position26, tokenIndex26 := position, tokenIndex
												if buffer[position] != rune(' ') {
													goto l27
												}
												position++
												goto l26
											l27:
												position, tokenIndex = position26, tokenIndex26
												if buffer[position] != rune('\t') {
													goto l24
												}
												position++
											}
										l26:
											add(ruleSP, position25)
										}
										goto l23
									l24:
										position, tokenIndex = position24, tokenIndex24
									}
									if !_rules[ruleUSCode]() {
										goto l18
									}
									if buffer[position] != rune(')') {
										goto l18
									}
									position++
									goto l8
								l18:
									position, tokenIndex = position8, tokenIndex8
									if buffer[position] != rune('(') {
										goto l6
									}
									position++
									if !_rules[ruleMarket]() {
										goto l6
									}
									if buffer[position] != rune(':') {
										goto l6
									}
									position++
									if !_rules[ruleCode]() {
										goto l6
									}
									if buffer[position] != rune(')') {
										goto l6
									}
									position++
								}
							l8:
								add(ruleStock, position7)
							}
							goto l5
						l6:
							position, tokenIndex = position5, tokenIndex5
							{
								position29 := position
								if buffer[position] != rune('$') {
									goto l28
								}
								position++
								{
									position30, tokenIndex30 := position, tokenIndex
									if !_rules[ruleStockName]() {
										goto l31
									}
									goto l30
								l31:
									position, tokenIndex = position30, tokenIndex30
									if !_rules[ruleStockName]() {
										goto l28
									}
									if buffer[position] != rune('-') {
										goto l28
									}
									position++
									if !_rules[ruleLetter]() {
										goto l28
									}
								l32:
									{
										position33, tokenIndex33 := position, tokenIndex
										if !_rules[ruleLetter]() {
											goto l33
										}
										goto l32
									l33:
										position, tokenIndex = position33, tokenIndex33
									}
								}
							l30:
								if buffer[position] != rune('(') {
									goto l28
								}
								position++
								if !_rules[ruleCode]() {
									goto l28
								}
								if buffer[position] != rune('.') {
									goto l28
								}
								position++
								if !_rules[ruleMarket]() {
									goto l28
								}
								if buffer[position] != rune(')') {
									goto l28
								}
								position++
								if buffer[position] != rune('$') {
									goto l28
								}
								position++
								add(ruleFTStock, position29)
							}
							goto l5
						l28:
							position, tokenIndex = position5, tokenIndex5
							{
								position35 := position
								if buffer[position] != rune('$') {
									goto l34
								}
								position++
								if !_rules[ruleStockName]() {
									goto l34
								}
								if buffer[position] != rune('(') {
									goto l34
								}
								position++
								{
									position36, tokenIndex36 := position, tokenIndex
									if !_rules[ruleCNMarket]() {
										goto l37
									}
									if !_rules[ruleACode]() {
										goto l37
									}
									goto l36
								l37:
									position, tokenIndex = position36, tokenIndex36
									if !_rules[ruleUSCode]() {
										goto l38
									}
									goto l36
								l38:
									position, tokenIndex = position36, tokenIndex36
									if !_rules[ruleHKCode]() {
										goto l34
									}
								}
							l36:
								if buffer[position] != rune(')') {
									goto l34
								}
								position++
								if buffer[position] != rune('$') {
									goto l34
								}
								position++
								add(ruleXLStock, position35)
							}
							goto l5
						l34:
							position, tokenIndex = position5, tokenIndex5
							{
								position39 := position
								if !matchDot() {
									goto l3
								}
								add(ruleOTHER, position39)
							}
						}
					l5:
						add(ruleLine, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position40, tokenIndex40 := position, tokenIndex
					if !matchDot() {
						goto l40
					}
					goto l0
				l40:
					position, tokenIndex = position40, tokenIndex40
				}
				add(ruleItem, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Line <- <(Stock / FTStock / XLStock / OTHER)> */
		nil,
		/* 2 OTHER <- <.> */
		nil,
		/* 3 Stock <- <(('$' Code (Suffix / Suffix?) '$') / ('$'? Code Suffix) / ('$' USCode) / ('(' (('N' 'Y' 'S' 'E') / ('N' 'A' 'S' 'D' 'A' 'Q')) ('：' / ':') SP* USCode ')') / ('(' Market ':' Code ')'))> */
		nil,
		/* 4 XLStock <- <('$' StockName '(' ((CNMarket ACode) / USCode / HKCode) ')' '$')> */
		nil,
		/* 5 FTStock <- <('$' (StockName / (StockName '-' Letter+)) '(' Code '.' Market ')' '$')> */
		nil,
		/* 6 StockName <- <(!((&('\'') [\'-\']) | (&(')') ')') | (&('(') '(')) .)+> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				{
					position50, tokenIndex50 := position, tokenIndex
					{
						switch buffer[position] {
						case '\'':
							if c := buffer[position]; c < rune('\'') || c > rune('\'') {
								goto l50
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l50
							}
							position++
						default:
							if buffer[position] != rune('(') {
								goto l50
							}
							position++
						}
					}

					goto l46
				l50:
					position, tokenIndex = position50, tokenIndex50
				}
				if !matchDot() {
					goto l46
				}
			l48:
				{
					position49, tokenIndex49 := position, tokenIndex
					{
						position52, tokenIndex52 := position, tokenIndex
						{
							switch buffer[position] {
							case '\'':
								if c := buffer[position]; c < rune('\'') || c > rune('\'') {
									goto l52
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l52
								}
								position++
							default:
								if buffer[position] != rune('(') {
									goto l52
								}
								position++
							}
						}

						goto l49
					l52:
						position, tokenIndex = position52, tokenIndex52
					}
					if !matchDot() {
						goto l49
					}
					goto l48
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleStockName, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 7 Code <- <(USCode / HKCode / ACode)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[ruleUSCode]() {
						goto l57
					}
					goto l56
				l57:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[ruleHKCode]() {
						goto l58
					}
					goto l56
				l58:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[ruleACode]() {
						goto l54
					}
				}
			l56:
				add(ruleCode, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 8 USCode <- <Letter+> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				if !_rules[ruleLetter]() {
					goto l59
				}
			l61:
				{
					position62, tokenIndex62 := position, tokenIndex
					if !_rules[ruleLetter]() {
						goto l62
					}
					goto l61
				l62:
					position, tokenIndex = position62, tokenIndex62
				}
				add(ruleUSCode, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 9 HKCode <- <Number+> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleNumber]() {
					goto l63
				}
			l65:
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l66
					}
					goto l65
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
				add(ruleHKCode, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 10 ACode <- <Number+> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleNumber]() {
					goto l67
				}
			l69:
				{
					position70, tokenIndex70 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l70
					}
					goto l69
				l70:
					position, tokenIndex = position70, tokenIndex70
				}
				add(ruleACode, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 11 Letter <- <[A-Z]> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l71
				}
				position++
				add(ruleLetter, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 12 Number <- <[0-9]> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l73
				}
				position++
				add(ruleNumber, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 13 Suffix <- <('.' (Market / ('o' / 'O')))> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if buffer[position] != rune('.') {
					goto l75
				}
				position++
				{
					position77, tokenIndex77 := position, tokenIndex
					if !_rules[ruleMarket]() {
						goto l78
					}
					goto l77
				l78:
					position, tokenIndex = position77, tokenIndex77
					{
						position79, tokenIndex79 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l80
						}
						position++
						goto l79
					l80:
						position, tokenIndex = position79, tokenIndex79
						if buffer[position] != rune('O') {
							goto l75
						}
						position++
					}
				l79:
				}
			l77:
				add(ruleSuffix, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Market <- <(CNMarket / ((&('S') SGMarket) | (&('U') USMarket) | (&('H') HKMarket)))> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					position83, tokenIndex83 := position, tokenIndex
					if !_rules[ruleCNMarket]() {
						goto l84
					}
					goto l83
				l84:
					position, tokenIndex = position83, tokenIndex83
					{
						switch buffer[position] {
						case 'S':
							{
								position86 := position
								if buffer[position] != rune('S') {
									goto l81
								}
								position++
								if buffer[position] != rune('G') {
									goto l81
								}
								position++
								add(ruleSGMarket, position86)
							}
						case 'U':
							{
								position87 := position
								if buffer[position] != rune('U') {
									goto l81
								}
								position++
								if buffer[position] != rune('S') {
									goto l81
								}
								position++
								add(ruleUSMarket, position87)
							}
						default:
							{
								position88 := position
								if buffer[position] != rune('H') {
									goto l81
								}
								position++
								if buffer[position] != rune('K') {
									goto l81
								}
								position++
								add(ruleHKMarket, position88)
							}
						}
					}

				}
			l83:
				add(ruleMarket, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 15 CNMarket <- <(('S' 'H') / ('S' 'Z'))> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					position91, tokenIndex91 := position, tokenIndex
					if buffer[position] != rune('S') {
						goto l92
					}
					position++
					if buffer[position] != rune('H') {
						goto l92
					}
					position++
					goto l91
				l92:
					position, tokenIndex = position91, tokenIndex91
					if buffer[position] != rune('S') {
						goto l89
					}
					position++
					if buffer[position] != rune('Z') {
						goto l89
					}
					position++
				}
			l91:
				add(ruleCNMarket, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 16 HKMarket <- <('H' 'K')> */
		nil,
		/* 17 USMarket <- <('U' 'S')> */
		nil,
		/* 18 SGMarket <- <('S' 'G')> */
		nil,
		/* 19 SP <- <(' ' / '\t')> */
		nil,
	}
	p.rules = _rules
	return nil
}
